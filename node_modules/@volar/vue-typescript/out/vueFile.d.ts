import { TextRange } from '@volar/vue-code-gen';
import { ComputedRef } from '@vue/reactivity';
import { ITemplateScriptData, VueCompilerOptions } from './types';
import { EmbeddedFileSourceMap, Teleport } from './utils/sourceMaps';
import type * as _0 from 'typescript/lib/tsserverlibrary';
import { SourceMapBase } from '@volar/source-map';
export interface VueLanguagePlugin {
    compileFileToVue?(fileName: string, content: string): {
        vue: string;
        mapping(vueRange: {
            start: number;
            end: number;
        }): {
            start: number;
            end: number;
        } | undefined;
        sourceMap?: SourceMapBase;
    } | undefined;
    compileTemplateToHtml?(lang: string, tmplate: string): {
        html: string;
        mapping(htmlRange: {
            start: number;
            end: number;
        }): {
            start: number;
            end: number;
        } | undefined;
    } | undefined;
    getEmbeddedFilesCount?(sfc: Sfc): number;
    getEmbeddedFile?(fileName: string, sfc: Sfc, i: number): Embedded | undefined;
}
export interface VueFile extends ReturnType<typeof createVueFile> {
}
export interface EmbeddedStructure {
    self: Embedded | undefined;
    embeddeds: EmbeddedStructure[];
    inheritParentIndent?: boolean;
}
export interface Embedded {
    parentFileName?: string;
    file: EmbeddedFile;
    sourceMap: EmbeddedFileSourceMap;
    teleport?: Teleport;
}
export interface SfcBlock {
    tag: 'script' | 'scriptSetup' | 'template' | 'style' | 'customBlock';
    start: number;
    end: number;
    startTagEnd: number;
    endTagStart: number;
    lang: string;
    content: string;
}
export interface Sfc {
    template: SfcBlock | null;
    script: (SfcBlock & {
        src: string | undefined;
    }) | null;
    scriptSetup: SfcBlock | null;
    styles: (SfcBlock & {
        module: string | undefined;
        scoped: boolean;
    })[];
    customBlocks: (SfcBlock & {
        type: string;
    })[];
}
export interface EmbeddedFile {
    fileName: string;
    lang: string;
    content: string;
    isTsHostFile: boolean;
    capabilities: {
        diagnostics: boolean;
        foldingRanges: boolean;
        formatting: boolean;
        documentSymbol: boolean;
        codeActions: boolean;
        inlayHints: boolean;
    };
}
export declare function createVueFile(fileName: string, _content: string, _version: string, compilerOptions: VueCompilerOptions, ts: typeof import('typescript/lib/tsserverlibrary'), tsLs: ts.LanguageService | undefined, tsHost: ts.LanguageServiceHost | undefined): {
    fileName: string;
    getContent: () => string;
    getCompiledVue: () => {
        vue: string;
        mapping(vueRange: {
            start: number;
            end: number;
        }): {
            start: number;
            end: number;
        } | undefined;
        sourceMap?: SourceMapBase<undefined> | undefined;
    } | undefined;
    getSfcTemplateLanguageCompiled: () => {
        html: string;
        mapping(htmlRange: {
            start: number;
            end: number;
        }): {
            start: number;
            end: number;
        } | undefined;
    } | undefined;
    getSfcVueTemplateCompiled: () => {
        errors: import("@volar/vue-code-gen").CompilerError[];
        warnings: import("@volar/vue-code-gen").CompilerError[];
        ast: import("@volar/vue-code-gen").RootNode | undefined;
    } | undefined;
    getVersion: () => string;
    update: (newContent: string, newVersion: string) => {
        scriptUpdated: boolean;
    };
    getTemplateData: () => ITemplateScriptData;
    getScriptFileName: () => string;
    getDescriptor: () => Sfc;
    getScriptAst: () => _0.SourceFile | undefined;
    getScriptSetupAst: () => _0.SourceFile | undefined;
    getSfcRefSugarRanges: () => {
        refs: {
            flag: TextRange;
            leftBindings: TextRange[];
            rightFn: TextRange;
        }[];
        raws: {
            fullRange: TextRange;
            argsRange: TextRange;
        }[];
    } | undefined;
    getEmbeddeds: () => EmbeddedStructure[];
    getAllEmbeddeds: () => Embedded[];
    getScriptSetupRanges: () => {
        importSectionEndOffset: number;
        notOnTopTypeExports: TextRange[];
        bindings: TextRange[];
        typeBindings: TextRange[];
        withDefaultsArg: TextRange | undefined;
        propsAssignName: string | undefined;
        propsRuntimeArg: TextRange | undefined;
        propsTypeArg: TextRange | undefined;
        emitsAssignName: string | undefined;
        emitsRuntimeArg: TextRange | undefined;
        emitsTypeArg: TextRange | undefined;
        emitsTypeNums: number;
        exposeRuntimeArg: TextRange | undefined;
        exposeTypeArg: TextRange | undefined;
    } | undefined;
    isJsxMissing: () => boolean;
    refs: {
        content: import("@vue/reactivity").Ref<string>;
        allEmbeddeds: ComputedRef<Embedded[]>;
        teleports: ComputedRef<{
            file: EmbeddedFile;
            teleport: Teleport;
        }[]>;
    };
};
export declare function useCssModuleClasses(sfc: Sfc): ComputedRef<{
    style: (typeof sfc.styles)[number];
    index: number;
    classNameRanges: TextRange[];
}[]>;
export declare function useCssScopedClasses(sfc: Sfc, compilerOptions: VueCompilerOptions): ComputedRef<{
    style: (typeof sfc.styles)[number];
    index: number;
    classNameRanges: TextRange[];
}[]>;
export declare function useCssVars(sfc: Sfc): ComputedRef<{
    style: (typeof sfc.styles)[number];
    styleIndex: number;
    ranges: TextRange[];
}[]>;
